{"data" : {"current_file":"browser/ballot.sol","sources":"{\"browser\":{\"ballot.sol\":{\"/readonly\":false,\"/content\":\"pragma solidity ^0.4.0;\\ncontract Ballot {\\n\\n    struct Voter {\\n        uint weight;\\n        bool voted;\\n        uint8 vote;\\n        address delegate;\\n    }\\n    struct Proposal {\\n        uint voteCount;\\n    }\\n\\n    address chairperson;\\n    mapping(address =\u003e Voter) voters;\\n    Proposal[] proposals;\\n\\n    /// Create a new ballot with $(_numProposals) different proposals.\\n    function Ballot(uint8 _numProposals) public {\\n        chairperson = msg.sender;\\n        voters[chairperson].weight = 1;\\n        proposals.length = _numProposals;\\n    }\\n\\n    /// Give $(toVoter) the right to vote on this ballot.\\n    /// May only be called by $(chairperson).\\n    function giveRightToVote(address toVoter) public {\\n        if (msg.sender != chairperson || voters[toVoter].voted) return;\\n        voters[toVoter].weight = 1;\\n    }\\n\\n    /// Delegate your vote to the voter $(to).\\n    function delegate(address to) public {\\n        Voter storage sender = voters[msg.sender]; // assigns reference\\n        if (sender.voted) return;\\n        while (voters[to].delegate != address(0) \u0026\u0026 voters[to].delegate != msg.sender)\\n            to = voters[to].delegate;\\n        if (to == msg.sender) return;\\n        sender.voted = true;\\n        sender.delegate = to;\\n        Voter storage delegateTo = voters[to];\\n        if (delegateTo.voted)\\n            proposals[delegateTo.vote].voteCount += sender.weight;\\n        else\\n            delegateTo.weight += sender.weight;\\n    }\\n\\n    /// Give a single vote to proposal $(toProposal).\\n    function vote(uint8 toProposal) public {\\n        Voter storage sender = voters[msg.sender];\\n        if (sender.voted || toProposal \u003e= proposals.length) return;\\n        sender.voted = true;\\n        sender.vote = toProposal;\\n        proposals[toProposal].voteCount += sender.weight;\\n    }\\n\\n    function winningProposal() public constant returns (uint8 _winningProposal) {\\n        uint256 winningVoteCount = 0;\\n        for (uint8 prop = 0; prop \u003c proposals.length; prop++)\\n            if (proposals[prop].voteCount \u003e winningVoteCount) {\\n                winningVoteCount = proposals[prop].voteCount;\\n                _winningProposal = prop;\\n            }\\n    }\\n}\"}}}","timeout":"100","global_timeout":"50","depthlimit":"50","gaslimit":"6700000","looplimit":"10"}}
